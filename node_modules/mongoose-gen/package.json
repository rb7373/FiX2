{
  "author": {
    "name": "alexandru topliceanu",
    "email": "alexandru.topliceanu@gmail.com",
    "url": "https://github.com/topliceanu"
  },
  "name": "mongoose-gen",
  "description": "generates mongoose schemas from json documents, supports DBRefs and Arrays of DBRef",
  "version": "0.0.3",
  "homepage": "https://github.com/topliceanu/mongoose-gen",
  "repository": {
    "type": "git",
    "url": "git://github.com/topliceanu/mongoose-gen.git"
  },
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "mocha": "*",
    "mongoose": "*"
  },
  "devDependencies": {},
  "optionalDependencies": {},
  "engines": {
    "node": "0.6"
  },
  "readme": "mongoose-gen\n============\n[![Build Status](https://secure.travis-ci.org/topliceanu/mongoose-gen.png?branch=master)](http://travis-ci.org/topliceanu/mongoose-gen)\n\n\nGist\n----\n\n**mongoose-gen** generates mongoose schemas from json documents\n\n\nInstallation\n------------\n\n    npm install mongoose-gen\n\n\nDevelopment and Running Tests\n-----------------------------\n\t\n\tgit clone git@github.com:topliceanu/mongoose-gen.git\n\tcd mongoose-gen\n\tnpm install\n\tnpm test\n\n\nUsage Example\n-------------\n\nbook.json\n\n\t{\n\t\t\"title\": {\"type\": \"String\", \"trim\": true, \"index\": true, \"required\": true},\n\t\t\"year\": {\"type\": \"Number\", \"max\": 2012, \"validate\": \"validateBookYear\"},\n\t\t\"author\": {\"type\": \"ObjectId\", \"ref\": \"Author\", \"index\": true, \"required\": true}\n\t}\n\n\nindex.js\n \n\tvar generator = require('mongoose-gen');\n\tvar fs = require('fs');\n\n\tvar mongoose = require('mongoose');\n\tmongoose.connect('mongodb://localhost/test');\n\n\t// configuration\n\tgenerator.setConnection(mongoose); // make sure you connected\n\tgenerator.setValidator('validateBookYear', function (value) {\n\t\treturn true;\n\t});\n\n\t// load json\n\tfs.readFile('book.json', 'UTF-8', function (err, data) {\n\t\tif (err) throw err;\n\t\ttry {\n\t\t\tvar json = JSON.parse(data);\n\t\t\tvar Book = generator.schema('Book', json);\n\t\t\t/* \n\t\t\t\tBook is an instance of type mongoose.Model\n\t\t\t\tIt has been registered with mongoose under the name 'Book', you can retrieve it by mongoose.model('Book');\n\t\t\t\tIf you need the Schema object, use Book.schema\n\t\t\t*/\n\t\t}\n\t\tcatch(exception) {\n\t\t\tthrow exception;\n\t\t}\n\t});\n\nFor more examples of use, see the tests in `test/index.js`\n\n\nSupported Schema Types and Options\n----------------------------------\n\n**mongoose-gen** aims for the optimal transformation of json documents into mongoose schemas.\n\nHowever some features cannot be represented in json very well (particulary function validators, setters, getters or defaults) so this utility is using strings that identify pre-registered functions.\n\nTypes are expected as strings in the json document and will be converted acordingly (case insensitive). Supported types (and their options) are:\n\n\n* **String**\n    - lowercase: Boolean\n    - uppercase: Boolean\n    - trim: Boolean\n    - match: String - expects a string that will be passed to new Regexp() constructor\n    - enum: [String]\n\n* **Number**\n    - min: Number\n    - max: Number\n\n* **Boolean**\n\n* **Date**\n\n* **Buffer**\n\n* **ObjectId**\n    - ref: String - the name of the Model to reference [Required]\n\n* **Mixed**\n\n* **Additional Type Options**\n    - type: String - a type from one of the above [Required]\n    - _default_: String - identifier of a previously registered default\n    - required: Boolean\n    - select: Boolean\n    - _get_: String - identifier of a previously registered getter\n    - _set_: String - identifier of a previously registered setter \n    - index: Boolean\n    - unique: Boolean\n    - sparse: Boolean\n    - _validate_: String - identifier of a previously registered getter\n\n\n**NOTE** Only the types and options defined above are permitted, unrecognized values are whitelisted or generate and exception!\n\n\nAPI\n---\n\n\tgenerator.setConnection(mongoose: mongoose.Connection): undefined // REQUIRED before compiling a json descriptor\n\n\tgenerator.setValidator(validator: Function): undefined\n\n\tgenerator.setDefault(default: Function): undefined\n\n\tgenerator.setSetter(getter: Function): undefined\n\n\tgenerator.setGetter(setter: Function): undefined\n\n\tgenerator.schema(name: String, json: Object): mongoose.Model\n\n\nSetters, Getters, Defaults and Validators\n-------------------------------\n\t\nSetters, Getters, Defaults and Validators must be pre-registered as such with the `generator` instance.\n\n**mongoose-gen** uses the name under which these were registered to look them up and add them to the mongoose.Schema\n\nThe registered name are global to all generated schemas so you can reuse them.\n\n\n\tvar generator = require('mongoose-gen');\n\n\tgenerator.addSetter( mySetter, function (value) { .. }); // return a new value\n\tgenerator.addGetter( myGetter, function (value) { .. }); // return a new value\n\tgenerator.addDefault( myDefault, function (value) { .. }); // return a new value\n\tgenerator.addValidator( myValidator, function (value) { .. }); // return Boolean\n\n\nIn the `usage` section above you can see an example of defining a validator.\n\n\nInspiration\n-----------\n\n* [mongoose-from-json-schema](https://github.com/work-in-progress/mongoose-from-json-schema)\n\n* [json-mongoose-schemadef](https://github.com/adityab/json-mongoose-schemadef)\n\n\nLicence\n-------\n\n(The MIT License)\n\nCopyright (c) 2009-2011 Alex Topliceanu alexandru (dot) topliceanu (at) gmail (dot) com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n",
  "readmeFilename": "README.md",
  "_id": "mongoose-gen@0.0.3",
  "dist": {
    "shasum": "fedfe33c0c0a6037937b5112e28d6d2b21807609",
    "tarball": "http://registry.npmjs.org/mongoose-gen/-/mongoose-gen-0.0.3.tgz"
  },
  "_npmVersion": "1.1.65",
  "_npmUser": {
    "name": "alexandru.topliceanu",
    "email": "alext@vibetrace.com"
  },
  "maintainers": [
    {
      "name": "alexandru.topliceanu",
      "email": "alext@vibetrace.com"
    }
  ],
  "directories": {},
  "_shasum": "fedfe33c0c0a6037937b5112e28d6d2b21807609",
  "_from": "mongoose-gen@",
  "_resolved": "https://registry.npmjs.org/mongoose-gen/-/mongoose-gen-0.0.3.tgz"
}
